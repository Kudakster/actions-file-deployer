name: "SFTP File Deployer"
description: "Advanced deployment with override support and flexible path mapping"

branding:
  icon: "upload"  
  color: "black"

inputs:
  host:
    description: "Remote host"
    required: true
  port:
    description: "Remote port"
    required: true
    default: 22
  user:
    description: "Username"
    required: true
  password:
    description: "Password"
    required: false
    default: ""
  paths:
    description: "Path mappings in JSON format (add :flat suffix to flatten)"
    required: true
    default: '{".": "."}'
  override-path:
    description: "Path to server-specific override folder"
    required: false
    default: ""
  excludes:
    description: "Files to exclude from sync"
    required: false
  debug:
    description: "Enable debug information (true, false)"
    required: false

runs:
  using: "composite"
  steps:
    - name: "Install dependencies"
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends lftp jq

    - name: "Deploy"
      shell: bash
      run: |
        
        # Deploy function
        function show_hr() {
            printf '%.s_' {1..100} && echo ""
        }

        # Initialize
        echo "::group::Initialization"

        # Validate Git repo
        if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" != "true" ]; then
            echo "::error::Git repository not found"
            exit 1
        fi

        # Parse path mappings
        declare -A path_mappings
        declare -A flatten_flags
        FLATTEN_KEYWORD=":flat"

        while IFS="=" read -r local_path remote_mapping; do
            if [[ "$remote_mapping" == *"$FLATTEN_KEYWORD"* ]]; then
                remote_path="${remote_mapping%$FLATTEN_KEYWORD}"
                flatten_flags["$local_path"]=1
            else
                remote_path="$remote_mapping"
                flatten_flags["$local_path"]=0
            fi
            path_mappings["$(echo "$local_path" | sed 's:/*$::')"]="$(echo "$remote_path" | sed 's:/*$::')"
        done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' <<< "${{ inputs.paths }}")

        # Debug output
        if [ "${{ inputs.debug }}" == "true" ]; then
            echo "Path Mappings:"
            for path in "${!path_mappings[@]}"; do
                echo "    $path â†’ ${path_mappings[$path]} $([ ${flatten_flags[$path]} -eq 1 ] && echo "(FLAT)")"
            done
            show_hr
        fi

        # Setup configurations
        echo "::group::Configuration"
        mkdir -p ~/.ssh
        echo -e "StrictHostKeyChecking no\nUserKnownHostsFile /dev/null" > ~/.ssh/config
        chmod 600 ~/.ssh/config

        # Create lftp config
        cat > ~/.lftprc << 'EOF'
        set sftp:auto-confirm true
        set net:timeout 10
        set xfer:parallel 3
        set mirror:parallel-transfer-count 3
        EOF
        echo "::endgroup::"

        # File processing (always delta sync)
        echo "::group::Prepare files"
        touch ~/files_to_upload ~/files_to_delete ~/override_changes ~/override_files ~/blocked_changes
        git_previous_commit=$(git rev-parse ${{ github.sha }}^)

        if git cat-file -t "$git_previous_commit" &>/dev/null; then
            # Process override folder if specified
            if [ -n "${{ inputs.override-path }}" ] && [ -d "${{ inputs.override-path }}" ]; then
                # Get list of all files in override folder (relative to override path)
                find "${{ inputs.override-path }}" -type f | while read -r file; do
                    echo "${file#${{ inputs.override-path }}/}" >> ~/override_files
                done

                # Get changes in override folder (relative to repo root)
                git diff --diff-filter=ACMRT --name-only "$git_previous_commit"..${{ github.sha }} -- "${{ inputs.override-path }}" > ~/override_changes
            fi

            # Process each path mapping
            for local_path in "${!path_mappings[@]}"; do
                remote_path="${path_mappings[$local_path]}"

                # Get changes from main folder (relative to repo root)
                git diff --diff-filter=ACMRT --name-only "$git_previous_commit"..${{ github.sha }} -- "$local_path" > ~/main_changes.tmp

                # Find and log blocked changes (files that exist in override folder)
                if [ -s ~/override_files ] && [ -s ~/main_changes.tmp ]; then
                    # Convert main changes to relative paths (relative to local_path)
                    sed "s|^$local_path/||" ~/main_changes.tmp > ~/main_changes_rel.tmp

                    # Find matches with override files (now comparing relative paths)
                    grep -Fxf ~/override_files ~/main_changes_rel.tmp > ~/blocked_changes.tmp || true

                    if [ -s ~/blocked_changes.tmp ]; then
                        echo "Blocked changes in $local_path (overridden files):" >> ~/blocked_changes
                        cat ~/blocked_changes.tmp | sed 's/^/    /' >> ~/blocked_changes
                        echo "" >> ~/blocked_changes

                        # Filter out blocked files from main changes
                        grep -vFxf ~/override_files ~/main_changes_rel.tmp > ~/filtered_changes_rel.tmp || true
                        # Restore full paths
                        awk -v local="$local_path" '{print local "/" $0}' ~/filtered_changes_rel.tmp > ~/filtered_changes.tmp
                    else
                        cp ~/main_changes.tmp ~/filtered_changes.tmp
                    fi
                else
                    cp ~/main_changes.tmp ~/filtered_changes.tmp
                fi

                # Apply excludes if specified
                if [ -n "${{ inputs.excludes }}" ]; then
                    grep -vFf <(echo "${{ inputs.excludes }}" | tr ',' '\n') ~/filtered_changes.tmp > ~/filtered_changes2.tmp
                    mv ~/filtered_changes2.tmp ~/filtered_changes.tmp
                fi

                # Convert to mapping format with proper flat handling
                awk -v local="$local_path" -v remote="$remote_path" -v flat="${flatten_flags[$local_path]}" '
                    {
                        gsub("^" local "/?", "")
                        if ($0 != "") {
                            if (flat == 1) {
                                split($0, parts, "/")
                                print local "/" $0 "\t" remote "/" parts[length(parts)]
                            } else {
                                print local "/" $0 "\t" remote "/" $0
                            }
                        }
                    }' ~/filtered_changes.tmp >> ~/files_to_upload

                # Process deletions - only for files not in override folder
                git diff-tree --diff-filter=D --name-only -t "$git_previous_commit"..${{ github.sha }} -- "$local_path" > ~/deletions.tmp
                if [ -s ~/override_files ]; then
                    sed "s|^$local_path/||" ~/deletions.tmp > ~/deletions_rel.tmp
                    grep -vFxf ~/override_files ~/deletions_rel.tmp > ~/filtered_deletions_rel.tmp || true
                    awk -v local="$local_path" '{print local "/" $0}' ~/filtered_deletions_rel.tmp > ~/filtered_deletions.tmp
                else
                    cp ~/deletions.tmp ~/filtered_deletions.tmp
                fi

                awk -v local="$local_path" -v remote="$remote_path" -v flat="${flatten_flags[$local_path]}" '{
                    # Remove the local path prefix
                    gsub("^" local "/?", "", $0)
                    if (flat == 1) {
                        split($0, parts, "/")
                        print remote "/" parts[length(parts)]
                    } else {
                        print remote "/" $0
                    }
                }' ~/filtered_deletions.tmp >> ~/files_to_delete

                rm -f ~/main_changes*.tmp ~/filtered_changes*.tmp ~/deletions*.tmp ~/blocked_changes.tmp
            done

            # Process override changes
            if [ -s ~/override_changes ]; then
                while read -r override_file; do
                    # Get path relative to override folder
                    rel_path="${override_file#${{ inputs.override-path }}/}"

                    # Find matching local_path
                    for local_path in "${!path_mappings[@]}"; do
                        if [[ "$rel_path" == "$local_path"* ]]; then
                            remote_path="${path_mappings[$local_path]}"
                            # For flat paths, use just the filename
                            if [ ${flatten_flags[$local_path]} -eq 1 ]; then
                                filename=$(basename "$rel_path")
                                echo -e "$override_file\t$remote_path/$filename" >> ~/files_to_upload
                            else
                                # Remove local_path prefix from rel_path
                                sub_path="${rel_path#$local_path/}"
                                echo -e "$override_file\t$remote_path/$sub_path" >> ~/files_to_upload
                            fi
                            break
                        fi
                    done
                done < ~/override_changes
            fi
        fi

        # Remove duplicates
        sort -u ~/files_to_upload -o ~/files_to_upload
        sort -u ~/files_to_delete -o ~/files_to_delete

        # Final debug output
        echo "::group::Debug Details"
        echo "Full debug log:"
        cat ~/debug_log | sed 's/^/    /'
        echo "::endgroup::"

        # Debug output
        if [ "${{ inputs.debug }}" == "true" ]; then
            echo "::group::File Changes"
            echo "Files to upload:"
            [ -s ~/files_to_upload ] && cat ~/files_to_upload | sed 's/^/    /' || echo "    None"
            show_hr
            echo "Files to delete:"
            [ -s ~/files_to_delete ] && cat ~/files_to_delete | sed 's/^/    /' || echo "    None"
            show_hr
            echo "Override changes detected:"
            [ -s ~/override_changes ] && cat ~/override_changes | sed 's/^/    /' || echo "    None"
            show_hr
            echo "Blocked changes (main folder overridden by override folder):"
            [ -s ~/blocked_changes ] && cat ~/blocked_changes || echo "    None"
            echo "::endgroup::"
        fi
        echo "::endgroup::"

        echo "::group::Transfer files"
        function process_upload() {
                local src="$1"
                local dest="$2"

                # Extract the remote directory path from destination
                remote_dir="${dest%/*}"
                
                # Create secure LFTP script file with all connection details
                cat > ~/lftp_commands <<LFTP_SCRIPT
        set cmd:fail-exit true
        open -u "${{ inputs.user }}","${{ inputs.password }}" -p "${{ inputs.port }}" sftp://${{ inputs.host }}
        
        # First try to upload without creating directories
        put "$GITHUB_WORKSPACE/$src" -o "$dest" || (
          # If upload fails, create parent directory and try again
          mkdir -p "$remote_dir"
        put "$GITHUB_WORKSPACE/$src" -o "$dest"
        )
        
        quit
        LFTP_SCRIPT
        
                echo "UPLOAD: $src â†’ $dest"
                if ! lftp -f ~/lftp_commands; then
                        echo "::error::Failed to upload $src"
                        return 1
                fi
                rm -f ~/lftp_commands
        }

        # Process uploads
        if [ -s ~/files_to_upload ]; then
                upload_errors=0
                while IFS=$'\t' read -r src dest; do
                        if [ -f "$GITHUB_WORKSPACE/$src" ]; then
                                if ! process_upload "$src" "$dest"; then
                                        ((upload_errors++))
                                fi
                        else
                                echo "::warning::File not found: $src"
                        fi
                done < ~/files_to_upload
                
                if [ $upload_errors -gt 0 ]; then
                        echo "::error::Failed to upload $upload_errors files"
                        exit 1
                fi
        else
                echo "No files to upload"
        fi
        echo "::endgroup::"

        # Process deletions
        echo "::group::Delete files"
        if [ -s ~/files_to_delete ]; then
                # Create LFTP script with proper deletion commands
                cat > ~/lftp_delete_commands <<LFTP_SCRIPT
        set cmd:fail-exit true
        open -u "${{ inputs.user }}","${{ inputs.password }}" -p "${{ inputs.port }}" sftp://${{ inputs.host }}

        # Process each file to delete
        $(while read -r file; do echo "rm -f \"$file\""; done < ~/files_to_delete)

        quit
        LFTP_SCRIPT

                echo "Files to be deleted:"
                cat ~/files_to_delete
                show_hr
                
                if ! lftp -f ~/lftp_delete_commands; then
                        echo "::error::Failed to delete files"
                        exit 1
                fi
                rm -f ~/lftp_delete_commands
                echo "Files deleted successfully"
        else
                echo "No files to delete"
        fi
        echo "::endgroup::"
